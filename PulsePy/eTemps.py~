import time
import glob
import os
import numpy as np
import matplotlib.pyplot as plt
import statistics as statistics
from statistics import StatisticsError
from scipy.optimize import curve_fit
import scipy.optimize as optimize
import csv
import pylandau
from pylab import rcParams
from shutil import copyfile
import ScopeTrace
import ScopeData

current=0.
totalPulses=0
RMSEVals=[0]
blankArr=[]
avgRMSE=0.
dataSet=[]
dataMinVal=0.
num2Pulse=0
num1Pulse=0
directory=''
ratio=0.

xdata=np.asarray([])
ydata=np.asarray([])

dataSet=np.asarray([])
sampleSize=0

dataPath='../Research2018-master/DataDir/'

class Template(ScopeTrace.ScopeTrace):

	def __init__(self, data = '15192.CSV', n_average = 1):
		
		ScopeTrace.ScopeTrace.__init__(self, data, n_average)
	@staticmethod
	def processfile(sourceDir, path):
		global dataSet, sampleSize, xdata, ydata
		xArr=[]
		yArr=[]
		with open(sourceDir+path, 'r') as f:
			reader=csv.reader(f)
			for line in reader:
				xArr.append(float(line[3]))
				yArr.append(float(line[4]))
		xdata=np.asarray(xArr)
		ydata=np.asarray(yArr)*10**-9
		with open(sourceDir+path, 'r') as f:
			reader=csv.reader(f)
			for line in reader:
				if sampleSize==0:
					dataSet=ydata
				else:
					dataSet+=ydata
			sampleSize+=1
	
	@staticmethod
	def makeTemp(sourceDir, targetPath, targetName):
		global dataSet, xdata, sampleSize
		for filename in os.listdir(sourceDir):
			print("Open and process: %s" % filename)
			Template.processfile(sourceDir,filename)
		print(sampleSize)
		dataSet/=sampleSize
		plt.plot(xdata, -dataSet)
		plt.title('Average Amplitude Template')
		plt.xlabel('Time (ns)')
		plt.ylabel('Voltage (V)')
		plt.savefig(targetPath+targetName+'_graph.png')
		plt.clf()

		datasetIndex=0
		fullpath = targetPath+targetName+'.CSV'
		print('target path in maketemp: '+ os.path.abspath(fullpath))
		idx=0
		with open(fullpath,'w') as fh:
			writer=csv.writer(fh)
			for y in dataSet:
				writer.writerow([0, 0, 0, xdata[idx],y])
				idx+=1
		return fullpath


	@staticmethod
	def templateFromFile(_dir, filename):
		print('templateFromFile: opening '+ os.path.abspath(_dir+filename))
		scopeData=ScopeData.ScopeData(_dir)
		data=scopeData.data_read(filename+'.CSV')
		template=Template(data)
		return template


	@staticmethod
	def fitAndPlotLNOPLOT(xdata, ydata):
		p0=100., 30., 1.
		popt, pcov = curve_fit(pylandau.landau, np.asarray(xdata), np.asarray(ydata), p0, method='lm', maxfev=100000)
		yDat=pylandau.landau(np.asarray(xdata),*popt)
		return yDat
	
	
	
	

	@staticmethod
	def shiftPad0(li, x):
		if(x==0):
			return li
		else:
			return (np.append([0.] * x, li[:len(li)-x]))
	'''
	def fitPulse(self, pulse):
		global ratio
		yDatLPulse=Template.fitAndPlotLNOPLOT(self.xvalues, -np.asarray(pulse.inverted()))
		yDatLTemp=Template.fitAndPlotLNOPLOT(self.xvalues, self.yvalues)
		minValPulse=np.min(yDatLPulse)
		minValTemp=np.min(yDatLTemp)
		ratio=np.abs(minValPulse/minValTemp)
		yDataNew=(ratio*-self.inverted())
		
		return yDataNew
	'''

	def shiftPulses(self, pulse):
		global ratio
		yDatLPulse=Template.fitAndPlotLNOPLOT(self.xvalues, -np.asarray(pulse.inverted()))
		yDatLTemp=Template.fitAndPlotLNOPLOT(self.xvalues, self.yvalues)
		minValPulse=np.min(yDatLPulse)
		minValTemp=np.min(yDatLTemp)
		ratio=np.abs(minValPulse/minValTemp)
		yDataNew=(ratio*-np.asarray(self.inverted()))

		minValPulsePos=np.argmin(yDatLPulse)
		minValTempPos=np.argmin(yDatLTemp)
		difference=minValPulsePos-minValTempPos
		shift=''
		yDataPulse=np.asarray([])
		yDataTemp=np.asarray([])
		if difference<0:
			shift='pulse'
			yDataPulse=Template.shiftPad0(-np.asarray(pulse.inverted()),np.abs(difference))
			yDataTemp=yDataNew
		else:
			shift='template'
			yDataTemp=Template.shiftPad0(yDataNew,difference)
			yDataPulse=-np.asarray(pulse.inverted())
		return (shift,yDataTemp,yDataPulse, difference)

	@staticmethod
	def makeTemp(tempPath=None, tempName=None, targetDir=None):
		global dataPath
		tempDefault = dataPath+'/templatePulses/'+'template'
		if tempDefault == tempPath+tempName:
			print("Can't modify default template.")
			return

		if tempPath == None:
			tempPath = dataPath+'/templatePulses/'
		if tempName == None:
			tempName = 'template_test'
		if targetDir==None:
			targetDir='../DataDir/genPulses/Template/'
		template=Template.templateFromFile(targetDir,tempName)
		template.saveF('Plot', 'genTemplate', template.xvalues, template.yvalues)
		template.addPlot(template.xvalues, template.yvalues, template)
		template.plotFinish('genTemplate')
		template.saveF('Data', 'genTemplate', template.xvalues, template.yvalues)
		return template
		

	@staticmethod
	def pulses(pulseDir,template, genDir=(dataPath+'/genPulses/Pulses/')):
		os.chdir(pulseDir)
		curDir=glob.glob('*.CSV')
		for simPulse in curDir:
			scope=ScopeData.ScopeData.pulseFromFile(pulseDir, simPulse)
			(shift,yDataTemp,yDataPulse,difference)=template.shiftPulses(scope)
			scope.addPlot(np.asarray(scope.xvalues),-yDataPulse,'Raw Data')
			scope.addPlot(np.asarray(scope.xvalues),-Template.residuals(yDataTemp,yDataPulse),'Residuals', 'c-', .75)
			scope.addPlot(np.asarray(scope.xvalues),-yDataTemp,'Template Fit', 'r--')
			scope.addPlot([],[], 'Difference ' + str(difference))
			scope.saveF('Plot','testPulse',scope.xvalues,scope.yvalues,genDir)
			scope.plotFinish(simPulse)
			print('saved in'+str(genDir))

	@staticmethod
	def residuals(tempData, pulseData):
		return (pulseData-tempData)
# Template.Residuals(Pulse) -> ScopeData # Residuals
# Subtract scaled template from raw data
# return trace of residuals


template=Template.makeTemp('/home/ewirth/simPulseData/','templateTest')
Template.pulses('/home/ewirth/simPulseData/',template)
print(sampleSize)
'''
template=Template.templateFromFile('/home/ewirth/templateData/','template1.csv')
'''
'''
print(template.yvalues)
template.saveF('Plot', 'test', template.xvalues, template.yvalues)
template.addPlot(template.xvalues, template.yvalues, template)
template.plotFinish('filenamex')
template.saveF('Data', 'test', template.xvalues, template.yvalues)
scope=ScopeData.ScopeData.pulseFromFile('/home/ewirth/sampleSet/','153616.CSV')
scope.addPlot(np.asarray(scope.xvalues)*10**9,np.asarray(scope.inverted()),'testLabel')
scope.addPlot(np.asarray(scope.xvalues)*10**9,template.residuals(scope),'resid', 'c-')
scope.addPlot(np.asarray(scope.xvalues)*10**9,-ratio*np.asarray(template.yvalues),'template', 'r--')
scope.saveF('Plot','testPulse',scope.xvalues,scope.yvalues,'/home/ewirth/sampleSet/')
scope.plotFinish('filename')
'''
'''
for name in glob.glob('*.CSV'): 
# os.listdir('~/physics/*.CSV'):
#for name in os.listdir(directory):
	
	#try:
	pulse=ScopeTrace.ScopeTrace(filename)
	yData = template.fitPulse(pulse)

	# Plot landauApprox approximation curve fit.
	mu, amp, eta = 1, 1000, .01
	p0 = [mu,amp,eta]
	bounds = [150, 30, 1]
	poptest = fitAndPlot(landauApprox, (0, bounds), p0, 'g--', 'Custom: ', self.xvalues, yData)

	plt.xlabel('Time (ns)')
	plt.ylabel('Voltage (V)')
	plt.legend()

	#except:
	#print('error')
	plt.savefig('./'+filename+'.png')
	plt.clf()
	plt.close('all')
	print(num1Pulse, num2Pulse)
''''''
#Define landau approximation function
	def landauApprox(x, mu, amp, eta):
		return -amp*(1/np.sqrt(2*np.pi))*np.exp((-eta*(x-mu)-np.exp(-eta*(x-mu)))/2)
'''
